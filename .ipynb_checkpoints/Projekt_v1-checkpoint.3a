{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6182a94a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import numpy as np\n",
    "from scipy.stats import qmc\n",
    "import matplotlib.pyplot as plt\n",
    "from ipywidgets import IntProgress\n",
    "from IPython.display import display\n",
    "import time\n",
    "\n",
    "np.random.seed(1)\n",
    "\n",
    "def scale_sample(par_r, par_z, par_a):\n",
    "    \n",
    "    [r_min, r_max, z_min, z_max] = par_a\n",
    "        \n",
    "    # Scale the variables to the sampling area\n",
    "    dist_r = r_max - r_min\n",
    "    dist_z = z_max - z_min\n",
    "\n",
    "    r = (dist_r * par_r) + r_min\n",
    "    z = (dist_z * par_z) + z_min\n",
    "        \n",
    "    return r, z\n",
    "\n",
    "def total_area(par_a):\n",
    "    '''\n",
    "    define the sampling area\n",
    "    '''\n",
    "    [r_min, r_max, z_min, z_max] = par_a\n",
    "    \n",
    "    return (r_max - r_min) * (z_max - z_min)\n",
    "\n",
    "def total_samplecount(par_a,par_d):\n",
    "    '''\n",
    "    define the sampling area\n",
    "    '''\n",
    "    [r_min, r_max, z_min, z_max] = par_a\n",
    "    r_len = (r_max - r_min)/par_d\n",
    "    z_len = (z_max - z_min)/par_d\n",
    "    return  r_len* z_len\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def mandelbrot_area(par_mandel,par_sizecount,par_area):\n",
    "    '''\n",
    "    define the sampling area\n",
    "    '''\n",
    "    if par_sizecount == 0:\n",
    "        return 0\n",
    "    if par_mandel.ndim < 1:\n",
    "        return par_mandel\n",
    "    elif  par_mandel.ndim == 1:\n",
    "        mandel_in_area = sum(1-par_mandel)\n",
    "    elif  par_mandel.ndim == 2:\n",
    "        mandel_in_area = sum(sum(1-par_mandel)) \n",
    "    elif  par_mandel.ndim == 3:\n",
    "        mandel_in_area = sum(sum(sum(1-par_mandel)))\n",
    "    elif  par_mandel.ndim >3:\n",
    "        print(\"too many dimensions!\")\n",
    "        return 0\n",
    "    ret_area = (mandel_in_area/par_sizecount) * par_area\n",
    "    return  ret_area\n",
    "\n",
    "\n",
    "def grid(par_a, par_d):\n",
    "    '''\n",
    "    define grid for the sampling area\n",
    "    '''\n",
    "    [r_min, r_max, z_min, z_max] = par_a\n",
    "    \n",
    "    r_axis = np.arange(r_min, r_max + par_d, par_d)\n",
    "    z_axis = np.arange(z_min, z_max + par_d, par_d)\n",
    "    \n",
    "    zz, rr = np.meshgrid(z_axis, r_axis)\n",
    "    \n",
    "    return zz, rr\n",
    "\n",
    "def mandel(par_x,par_c):\n",
    "    '''\n",
    "    next step in mandelbrot iteration\n",
    "    '''\n",
    "    [x_r,x_z] = par_x\n",
    "    [c_r,c_z] = par_c\n",
    "    \n",
    "    return [x_r**2 - x_z**2 + c_r, 2 * x_r * x_z + c_z]\n",
    "\n",
    "\n",
    "def mandel_cond(par_x):\n",
    "    '''\n",
    "    define the breaking condition\n",
    "    '''\n",
    "    [x_r,x_z] = par_x\n",
    "    \n",
    "    magn = (x_r**2 + x_z**2)**0.5\n",
    "    if magn > 2:\n",
    "        return 1\n",
    "    \n",
    "    return 0\n",
    "    \n",
    "           \n",
    "           \n",
    "def mandel_i(par_c,par_i):\n",
    "    '''\n",
    "    define the iteration loop breaking after i iterations\n",
    "    '''\n",
    "    x = [0, 0]\n",
    "    for _ in range(par_i):\n",
    "        x = mandel(x, par_c)\n",
    "        \n",
    "        cond = mandel_cond(x)\n",
    "        if cond:\n",
    "            return 1\n",
    "    \n",
    "    return 0\n",
    "    \n",
    "    \n",
    "def mandel_a(par_a, par_i, par_d):\n",
    "    '''\n",
    "    define the iteration loop for a square of size a with spacing d\n",
    "    '''\n",
    "    [r_min, r_max, z_min, z_max] = par_a\n",
    "    r_axis = np.arange(r_min, r_max + par_d, par_d)\n",
    "    z_axis = np.arange(z_min, z_max + par_d, par_d)\n",
    "    \n",
    "    plane = np.zeros((len(r_axis), len(z_axis)))\n",
    "    \n",
    "    for r in range(len(r_axis)):\n",
    "        for z in range(len(z_axis)):\n",
    "            c = [r_axis[r], z_axis[z]]\n",
    "            \n",
    "            result = mandel_i(c, par_i)\n",
    "            plane[r, z] = result\n",
    "    \n",
    "    return plane   \n",
    "    \n",
    "\n",
    "    \n",
    "def func_i(par_samples,par_a,par_i):\n",
    "    '''\n",
    "    Define function consdering the amount of maximal iterations \n",
    "    returning its specific area\n",
    "    '''\n",
    "    \n",
    "    loc_tot_area = total_area(par_a)\n",
    "    loc_sizecount = len(par_samples)\n",
    "    loc_mandel = np.zeros(loc_sizecount)\n",
    "    for loc_j in range(loc_sizecount):\n",
    "        loc_mandel[loc_j] =  mandel_i(par_samples[loc_j], par_i)\n",
    "        \n",
    "    ret_area = mandelbrot_area(loc_mandel,loc_sizecount,loc_tot_area)\n",
    "    return ret_area\n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "    \n",
    "def func_j_i(par_samples,par_a,par_i):\n",
    "    '''\n",
    "    Define function considering the improvement after j steps\n",
    "    returning the area for all precisions until i\n",
    "    '''\n",
    "    f = IntProgress(min=0, max=par_i) # instantiate the bar\n",
    "    display(f)\n",
    "    ret_area = []\n",
    "    for loc_j in range(par_i):\n",
    "        f.value +=1\n",
    "        ret_area.append(func_i(par_samples,par_a,loc_j))\n",
    "    return ret_area\n",
    "\n",
    "\n",
    "def func_s_log_uni(par_a,par_i,par_s,par_i_range=False,par_s_range=False):\n",
    "    '''\n",
    "    pure random sampling\n",
    "    Define function considering the improvement after j steps\n",
    "    returning the area for all precisions until i\n",
    "    '''\n",
    "    f = IntProgress(min=0, max=par_s+1) # instantiate the bar\n",
    "    display(f)\n",
    "    loc_tot_area = total_area(par_a)\n",
    "    \n",
    "    if par_i_range == True and par_s_range == True:\n",
    "        ret_area = np.empty((par_s,par_i))\n",
    "    elif par_i_range == True:\n",
    "        ret_area = np.empty((1,par_i))\n",
    "    elif par_s_range == True:\n",
    "        ret_area = np.empty((par_s,1))\n",
    "    else:\n",
    "        ret_area = np.empty((1,1))\n",
    "        \n",
    "        \n",
    "    if par_s_range == True:\n",
    "        start_s = 1\n",
    "    else:\n",
    "        start_s = par_s\n",
    "    \n",
    "    for loc_s in range(start_s,par_s+1):\n",
    "        f.value = loc_s\n",
    "        sample_size = 2**loc_s\n",
    "        loc_samples = np.empty((sample_size,2))\n",
    "        \n",
    "        #######\n",
    "        #create sample array(start)\n",
    "        ######\n",
    "        for loc_sub_s in range(sample_size):\n",
    "            \n",
    "            loc_r = (par_a[1]-par_a[0]) * np.random.rand() + par_a[0]\n",
    "            loc_z = (par_a[3]-par_a[2]) * np.random.rand() + par_a[2]\n",
    "            \n",
    "            loc_samples[loc_sub_s] = [loc_r,loc_z]\n",
    "        \n",
    "        #######\n",
    "        #create sample array(end)\n",
    "        ######\n",
    "        \n",
    "        #enter sample array to \n",
    "        \n",
    "        if par_i_range == True:\n",
    "            loc_temp_result = func_j_i(loc_samples,par_a,par_i)\n",
    "            ret_area[loc_s-start_s] = loc_temp_result - loc_temp_result[-1]\n",
    "        else:\n",
    "            ret_area[loc_s-start_s] = func_i(loc_samples,par_a,par_i)\n",
    "        \n",
    "        \n",
    "    if par_s_range == True and par_i_range ==False:\n",
    "        ret_area = ret_area - ret_area[-1]\n",
    "        \n",
    "    return abs(ret_area)\n",
    "\n",
    "\n",
    "def area_spacing (par_a, par_subspace):\n",
    "    [r_min, r_max, z_min, z_max] = par_a\n",
    "    loc_dim = np.append(par_subspace,4)\n",
    "    ret_spaces = numpy.empty(loc_dim)\n",
    "    \n",
    "    if ret_spaces.ndim >1:\n",
    "         \n",
    "    \n",
    "    for r in range(len(r_axis)):\n",
    "        for z in range(len(z_axis)):\n",
    "            c = [r_axis[r], z_axis[z]]\n",
    "            \n",
    "            result = mandel_i(c, par_i)\n",
    "            plane[r, z] = result\n",
    "    \n",
    "\n",
    "\n",
    "def func_s_log_ortho(par_a,par_i,par_s,par_i_range=False,par_s_range=False,subspaces = [4,4]:\n",
    "    '''\n",
    "    pure random sampling\n",
    "    Define function considering the improvement after j steps\n",
    "    returning the area for all precisions until i\n",
    "    '''\n",
    "    f = IntProgress(min=0, max=par_s+1) # instantiate the bar\n",
    "    display(f)\n",
    "    loc_tot_area = total_area(par_a)\n",
    "    \n",
    "    if par_i_range == True and par_s_range == True:\n",
    "        ret_area = np.empty((par_s,par_i))\n",
    "    elif par_i_range == True:\n",
    "        ret_area = np.empty((1,par_i))\n",
    "    elif par_s_range == True:\n",
    "        ret_area = np.empty((par_s,1))\n",
    "    else:\n",
    "        ret_area = np.empty((1,1))\n",
    "        \n",
    "        \n",
    "    if par_s_range == True:\n",
    "        start_s = 2\n",
    "    else:\n",
    "        start_s = par_s\n",
    "    \n",
    "    for loc_s in range(start_s,par_s+1):\n",
    "        f.value = loc_s\n",
    "        sample_size = 2**loc_s\n",
    "        loc_samples = np.empty((sample_size,2))\n",
    "        \n",
    "        #######\n",
    "        #create sample array(start)\n",
    "        ######\n",
    "        for loc_sub_s in range(sample_size):\n",
    "            \n",
    "            loc_r = (par_a[1]-par_a[0]) * np.random.rand() + par_a[0]\n",
    "            loc_z = (par_a[3]-par_a[2]) * np.random.rand() + par_a[2]\n",
    "            \n",
    "            loc_samples[loc_sub_s] = [loc_r,loc_z]\n",
    "        \n",
    "        #######\n",
    "        #create sample array(end)\n",
    "        ######\n",
    "        \n",
    "        #enter sample array to \n",
    "        \n",
    "        if par_i_range == True:\n",
    "            loc_temp_result = func_j_i(loc_samples,par_a,par_i)\n",
    "            ret_area[loc_s-start_s] = loc_temp_result - loc_temp_result[-1]\n",
    "        else:\n",
    "            ret_area[loc_s-start_s] = func_i(loc_samples,par_a,par_i)\n",
    "        \n",
    "        \n",
    "    if par_s_range == True and par_i_range ==False:\n",
    "        ret_area = ret_area - ret_area[-1]\n",
    "        \n",
    "    return abs(ret_area)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def func_s_d_latin(par_a,par_i,par_s, par_method):\n",
    "    '''\n",
    "    latin square sampling\n",
    "    Define function considering the improvement after j steps\n",
    "    returning the area for all precisions until i\n",
    "    '''\n",
    "    f = IntProgress(min=0, max=par_i+1) # instantiate the bar\n",
    "    display(f)\n",
    "    loc_tot_area = total_area(par_a)\n",
    "    mandelbrot_a = []\n",
    "    \n",
    "    if par_method == 'latin_hypercube':\n",
    "        # Create s samples (in [0, 1)\n",
    "        sampler = qmc.LatinHypercube(d=2)\n",
    "        samples = sampler.random(par_s)\n",
    "    \n",
    "    for loc_j in range(par_i + 1):\n",
    "        f.value +=1\n",
    "        \n",
    "        # Counter for the number of samples in the mandelbrot area\n",
    "        inside = 0\n",
    "        \n",
    "        for s in range(par_s):\n",
    "\n",
    "            if par_method == 'uniform':\n",
    "                # Random uniform variables\n",
    "                r = np.random.uniform()\n",
    "                z = np.random.uniform()\n",
    "\n",
    "            elif par_method == 'latin_hypercube':\n",
    "                # Pick from the next sample in the list\n",
    "                r = samples[s][0]\n",
    "                z = samples[s][1]\n",
    "\n",
    "            # Scale the variables to the sampling area\n",
    "            r, z = scale_sample(r, z, par_a)\n",
    "            \n",
    "            if mandel_i([r, z], loc_j) == 0:\n",
    "                inside += 1\n",
    "        \n",
    "        mandelbrot_a.append((inside/par_s) * loc_tot_area)\n",
    "\n",
    "    return mandelbrot_a\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f9b253c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[-0.010000000000000002, 0.1]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mandel([0,0.1],[0.0,0.1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1d358b8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "area = [-2, 1, -1, 1]     # Edges of the area\n",
    "spacing = 0.01            # Distance between 2 point on the grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e6876bec",
   "metadata": {},
   "outputs": [],
   "source": [
    "mandel_plane = mandel_a(area, 1000, spacing)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "0bad84dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "zz, rr = grid(area, spacing)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "2f1433d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "ax = plt.gca()\n",
    "\n",
    "pc = ax.pcolormesh(rr, zz, mandel_plane)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "ce43ec45",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4f1b03e972f044a495bedeeafd7aada8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "IntProgress(value=0, max=1001)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "area_estimate = func_j_i(area, 1000, 1000, 'uniform')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "fac02024",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.422"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "area_estimate[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ca052313",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.5081000000000002"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loc_sizecount = total_samplecount(area,spacing)\n",
    "mandelbrot_area(mandel_plane,loc_sizecount,total_area(area))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "52817a06",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4cbf6c66c1314dd89afc4327825fc966",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "IntProgress(value=0, max=16)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "area = [-2, 1, -1, 1]     # Edges of the area\n",
    "Iterations = 500\n",
    "Samples = 15\n",
    "np.random.seed(1337)\n",
    "area_estimate_uni = func_s_log_uni(area,Iterations,Samples,par_i_range=False,par_s_range=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "3521225b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plt.semilogy(area_estimate_uni,'g-',label= \"Area of Mandelbrot\")\n",
    "plt.title(\"Area Estimation after i Iterations\",size=20)\n",
    "plt.xlabel('Iteration',size=20)\n",
    "plt.ylabel('Area Estimation',size=20)\n",
    "plt.legend()\n",
    "#fig.savefig('figure1.png', dpi=300)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "8e22a358",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8b58511f3ece4b168bcf0dc39812b055",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "IntProgress(value=0, max=11)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4b4f4e88a9b34670afc95fc6f4dda070",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "IntProgress(value=0, max=50)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "area = [-2, 1, -1, 1]     # Edges of the area\n",
    "Iterations = 50\n",
    "Samples = 10\n",
    "np.random.seed(1337)\n",
    "area_estimate_uni = func_s_log_uni(area,Iterations,Samples,par_i_range=True,par_s_range=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "e9185184",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plt.semilogy(area_estimate_uni[0],'g-',label= \"Area of Mandelbrot\")\n",
    "plt.title(\"Area Estimation after i Iterations\",size=20)\n",
    "plt.xlabel('Iteration',size=20)\n",
    "plt.ylabel('Area Estimation',size=20)\n",
    "plt.legend()\n",
    "#fig.savefig('figure1.png', dpi=300)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "6bdab436",
   "metadata": {},
   "outputs": [],
   "source": [
    "sampler = qmc.LatinHypercube(d=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "458392a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.57476452, 0.23531926],\n",
       "       [0.79145972, 0.8188861 ],\n",
       "       [0.26908398, 0.68755655],\n",
       "       [0.85401292, 0.58599228],\n",
       "       [0.12171984, 0.08371893]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sampler.random(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "334c8c2e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[0., 0., 0., 0.],\n",
       "        [0., 0., 0., 0.],\n",
       "        [0., 0., 0., 0.],\n",
       "        [0., 0., 0., 0.]],\n",
       "\n",
       "       [[0., 0., 0., 0.],\n",
       "        [0., 0., 0., 0.],\n",
       "        [0., 0., 0., 0.],\n",
       "        [0., 0., 0., 0.]],\n",
       "\n",
       "       [[0., 0., 0., 0.],\n",
       "        [0., 0., 0., 0.],\n",
       "        [0., 0., 0., 0.],\n",
       "        [0., 0., 0., 0.]],\n",
       "\n",
       "       [[0., 0., 0., 0.],\n",
       "        [0., 0., 0., 0.],\n",
       "        [0., 0., 0., 0.],\n",
       "        [0., 0., 0., 0.]]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.zeros([4,4,4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9a91fd09",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 4, 4, 4])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test = [4,4,4]\n",
    "np.append(test,4)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7417ada6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
